# Nom du workflow qui apparaîtra dans l'onglet "Actions" de GitHub
name: Release Orkestra Plugin

# Déclencheur du workflow
on:
  push:
    tags:
      - 'v*' # Se déclenche uniquement sur la création de tags comme v1.0.0, v1.2.3, etc.

jobs:
  # Job pour construire les binaires pour chaque plateforme
  build:
    name: Build Plugin for ${{ matrix.goos }}/${{ matrix.goarch }}
    # Exécute ce job sur une machine virtuelle hébergée par GitHub
    runs-on: ubuntu-latest
    # Stratégie de matrice pour la compilation croisée
    strategy:
      matrix:
        # Définit les combinaisons de système d'exploitation (goos) et d'architecture (goarch)
        include:
          - goos: linux
            goarch: amd64
          - goos: linux
            goarch: arm64
          - goos: windows
            goarch: amd64
          - goos: darwin # darwin est le nom interne pour macOS
            goarch: amd64
          - goos: darwin
            goarch: arm64

    steps:
      # Étape 1 : Récupérer le code source du dépôt
      - name: Checkout code
        uses: actions/checkout@v4

      # Étape 2 : Installer et configurer la version de Go souhaitée
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.5' # Assurez-vous que cela correspond à votre version de Go

      # Étape 3 : Définir les noms de fichiers pour la compilation et l'archivage
      - name: Set output file and archive names
        id: set_names
        shell: bash
        run: |
          # Le nom du plugin, sans le préfixe "orkestra-plugin-"
          PLUGIN_NAME="fs"
          
          # Le nom complet de l'exécutable
          EXECUTABLE_BASE="orkestra-plugin-${PLUGIN_NAME}"
          EXECUTABLE_NAME="${EXECUTABLE_BASE}"
          
          # Ajoute l'extension .exe pour Windows
          if [ "${{ matrix.goos }}" == "windows" ]; then
            EXECUTABLE_NAME="${EXECUTABLE_BASE}.exe"
          fi
          
          # Le nom final de l'archive .zip, respectant la convention
          ARCHIVE_NAME="${EXECUTABLE_BASE}_${{ matrix.goos }}_${{ matrix.goarch }}.zip"

          # Expose ces variables pour les étapes suivantes
          echo "EXECUTABLE_NAME=${EXECUTABLE_NAME}" >> $GITHUB_ENV
          echo "ARCHIVE_NAME=${ARCHIVE_NAME}" >> $GITHUB_ENV
      
      # Étape 4 : Compiler le plugin pour la plateforme cible
      - name: Build plugin
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        # Supposant que le code source du plugin est à la racine de son propre dépôt
        run: go build -o ${{ env.EXECUTABLE_NAME }} .

      # Étape 5 : Créer l'archive .zip contenant l'exécutable
      - name: Archive plugin
        run: zip ${{ env.ARCHIVE_NAME }} ${{ env.EXECUTABLE_NAME }}

      # Étape 6 : Uploader l'archive en tant qu'artefact de build
      # Cela permet au job "release" de la récupérer plus tard
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: plugin-archives-${{ env.ARCHIVE_NAME }}
          path: ${{ env.ARCHIVE_NAME }}

  # Job pour créer la Release sur GitHub une fois que tous les builds sont terminés
  release:
    name: Create GitHub Release
    # Ce job ne démarre que si le job "build" a réussi pour toutes les plateformes
    needs: build
    runs-on: ubuntu-latest
    permissions:
      # Permission nécessaire pour que l'action puisse créer une Release
      contents: write

    steps:
      # Étape 1 : Télécharger tous les artefacts (les archives .zip) créés par le job "build"
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          name: plugin-archives-${{ env.ARCHIVE_NAME }}
          path: archives

      # Étape 2 : Créer la Release et y attacher toutes les archives téléchargées
      - name: Create Release and Upload Assets
        uses: softprops/action-gh-release@v2
        with:
          # Utilise le contenu du dossier "archives" comme assets de la release
          files: archives/*
